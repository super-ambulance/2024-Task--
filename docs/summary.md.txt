Git命令
git clone https://github.com/1c22/2024-Task2-chengyi.git
将个人仓库克隆到本地

cd 2024-Task2-chengyi
切换目录

git add docs/ images/ README.md
将文件添加到 Git 暂存区

git commit -m "完成任务一：提交Grok回答文档和截图"
提交更改到本地仓库

git push origin main
将更改推送到你GitHub 仓库

conda命令
conda create -n p372 python==3.7.2
创建一个版本为3.7.2的虚拟环境

activate p72
激活虚拟环境

pip install
安装

pip list
查看已经安装的库

pip install -r requirements.txt
安装仓库中的依赖

python plot.py
运行仓库中的 Plot.py 程序
一、Anaconda环境配置的优点
 1. 环境隔离性强：能为不同项目分别打造独立的运行环境，各环境内的Python版本和包互不干扰。比如一个深度学习项目依赖TensorFlow 2.6，另一个数据分析项目依赖TensorFlow 2.8，通过Anaconda可在不同环境中各自满足需求，避免版本冲突导致项目无法正常运行。
 
 2. 包管理便捷高效：?conda?命令支持快速安装、更新和卸载各类包，还会自动处理包之间的依赖关系。例如安装?pandas?时，它会自动安装其所需的其他依赖包，减少手动解决依赖问题的麻烦。
 
  3.环境迁移与共享容易：借助?conda env export?命令可将当前环境的配置导出为文件，在其他机器上通过?conda env create?能快速复现相同环境，方便项目在不同开发、测试和生产环境间部署
二、Anaconda环境配置的难点
 
1.?环境冲突排查复杂
 
 尽管conda会尽量解决包依赖问题，但在复杂的项目中，仍然可能出现环境冲突。例如，两个不同的包可能依赖同一个包的不同版本，conda可能无法完美解决这种冲突。排查这类冲突需要对包的依赖关系有深入理解，且可能需要花费大量时间尝试不同的解决方法，如更换包版本、调整安装顺序等。
 
2.?网络问题影响配置
 
 安装包和创建环境时，需要从远程仓库下载相关文件。若网络不稳定或存在防火墙限制，可能导致下载失败、安装中断等问题。此外，某些国外的包源可能访问速度较慢，需要用户手动配置国内镜像源，但配置不当也会引发新的问题，如镜像源不可用或下载的包不完整。
 
3.?高级配置要求高
 
 对于一些高级用户需求，如自定义环境变量、在特定环境中配置特定的Python解释器路径等，需要用户对操作系统的环境变量机制和Anaconda的底层配置有深入了解，否则可能导致配置错误，影响环境的正常使用。
三、Git分支管理中的经验
 
1.遵循规范的命名规则：分支名应能清晰反映其用途，比如功能分支以?feature/?开头，如?feature/user - registration?表示用户注册功能的开发分支；修复分支以?hotfix/?开头，便于团队成员快速理解分支的功能和使用场景。
 
2.及时进行分支合并：定期将开发分支合并到主分支（如?main? ），避免分支长时间分离导致差异过大，合并时冲突过多。例如每周或每完成一个小阶段的开发就进行一次合并操作。
 
3. 合理设置分支权限：对于主分支等重要分支，设置保护规则，限制非授权人员直接提交代码，防止不稳定或未经测试的代码进入主分支，保障主分支代码的稳定性和可靠性。
四、部署过程中常见问题及解决方案
 
- 依赖缺失：项目部署时提示缺少某些库。解决方案是检查项目的?requirements.txt?文件（若有），确认所需库及版本，然后在部署环境中使用?pip install -r requirements.txt?安装。若没有?requirements.txt?，可手动根据报错信息安装缺失库，如提示缺少?flask?，则使用?pip install flask?安装。
 
- 端口冲突：部署Web应用时，指定端口被其他程序占用。通过命令查看占用端口的程序并关闭，如在Linux系统下使用?lsof -i :端口号?查看占用端口程序的PI